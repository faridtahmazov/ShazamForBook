If this happens, the hash function will map all these instances to a few hash codes,
and programs that should run in linear time will instead run in quadratic time.
This is not just a theoretical problem. Prior to Java 2, the String hash func-
tion used at most sixteen characters evenly spaced throughout the string, starting
with the first character. For large collections of hierarchical names, such as URLs,
this function displayed exactly the pathological behavior described earlier.
Don’t provide a detailed specification for the value returned by hashCode,
so clients can’t reasonably depend on it; this gives you the flexibility to
change it. Many classes in the Java libraries, such as String and Integer, specify
the exact value returned by their hashCode method as a function of the instance
value. This is not a good idea but a mistake that we’re forced to live with: It
impedes the ability to improve the hash function in future releases. If you leave
the details unspecified and a flaw is found in the hash function or a better hash
function is discovered, you can change it in a subsequent release.
In summary, you must override hashCode every time you override equals, or
your program will not run correctly. Your hashCode method must obey the general
contract specified in Object and must do a reasonable job assigning unequal hash
codes to unequal instances. This is easy to achieve, if slightly tedious, using the
recipe on page 51. As mentioned in Item 10, the AutoValue framework provides a
fine alternative to writing equals and hashCode methods manually, and IDEs also
provide some of this functionality. Short sentence. a b c d f g y.